// for_loop_comprehensive_test.sy
// 覆盖 for 循环所有缺省情况的测试文件

int main() {
    int i, j, k;

    // 1. 完整形式（无缺省）
    for (i = 0; i < 2; i = i + 1) {
        printf("%d", i);
    }
    printf("\n");

    // 2. 缺省初始化语句
    i = 0;
    for (; i < 2; i = i + 1) {
        printf("%d", i);
    }
    printf("\n");

    // 3. 缺省条件表达式
    for (i = 0; ; i = i + 1) {
        if (i >= 2) break;
        printf("%d", i);
    }
    printf("\n");

    // 4. 缺省迭代表达式
    for (i = 0; i < 2; ) {
        printf("%d", i);
        i = i + 1;
    }
    printf("\n");

    // 5. 缺省初始化和条件
    i = 0;
    for (; ; i = i + 1) {
        if (i >= 2) break;
        printf("%d", i);
    }
    printf("\n");

    // 6. 缺省初始化和迭代
    i = 0;
    for (; i < 2; ) {
        printf("%d", i);
        i = i + 1;
    }
    printf("\n");

    // 7. 缺省条件和迭代
    for (i = 0; ; ) {
        if (i >= 2) break;
        printf("%d", i);
        i = i + 1;
    }
    printf("\n");

    // 8. 全部缺省
    i = 0;
    for (;;) {
        if (i >= 2) break;
        printf("%d", i);
        i = i + 1;
    }
    printf("\n");

    // 9. 多变量初始化/迭代
    for (j = 0, k = 2; j < k; j = j + 1, k = k - 1) {
        printf("(%d,%d)", j, k);
    }
    printf("\n");

    // 10. 嵌套for循环
    for (i = 0; i < 2; i = i + 1) {
        for (j = 0; j < 2; j = j + 1) {
            printf("(%d,%d)", i, j);
        }
    }
    printf("\n");

    // 11. 空循环体
    for (i = 0; i < 2; i = i + 1) {
        // 空循环体
    }
    printf("空循环完成\n");

    // 12. continue语句测试
    for (i = 0; i < 3; i = i + 1) {
        if (i == 1) {
            continue;
        }
        printf("%d", i);
    }
    printf("\n");

    return 0;
}