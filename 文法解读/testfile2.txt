// B级测试程序：数组初始化、多参数传递

const int LEN = 4;

// 计算数组的最大值
int maxInArray(int arr[], int size) {
    int i = 0;
    int maxVal = arr[0];
    for (i = 1; i < size; i = i + 1) {
        if (arr[i] > maxVal) {
            maxVal = arr[i];
        }
    }
    return maxVal;
}

// 计算两个数组的和（逐元素相加）
void addArrays(int a[], int b[], int size, int result[]) {
    int i = 0;
    for (i = 0; i < size; i = i + 1) {
        result[i] = a[i] + b[i];
    }
    return;
}

int main() {
    printf("23373541\n");

    // 数组初始化（完整初始化）
    int arr1[4] = {1, 2, 3, 4};
    // 数组初始化（部分初始化，剩余默认为0）
    int arr2[4] = {5, 6};

    // 单个变量与表达式测试
    int x = 10;
    int y = 20;
    int z = x * y;
    printf("z=%d\n", z);

    // 数组函数调用：最大值
    int max1 = maxInArray(arr1, 4);
    int max2 = maxInArray(arr2, LEN);
    printf("max1=%d\n", max1);
    printf("max2=%d\n", max2);

    // 数组加法测试
    int result[4];
    addArrays(arr1, arr2, LEN, result);

    int i = 0;
    for (i = 0; i < LEN; i = i + 1) {
        printf("result[%d]=%d\n", i, result[i]);
    }

    // 部分数组传参测试
    int partialMax = maxInArray(arr1+1, 3);
    printf("partialMax=%d\n", partialMax);

    // if / else 测试
    if (result[0] < z) {
        printf("result[0] < z\n");
    } else {
        printf("result[0] >= z\n");
    }

    // 测试 continue 与 break
    for (i = 0; i < 6; i = i + 1) {
        if (i == 2) continue;
        if (i == 5) break;
        printf("i=%d\n", i);
    }

    return 0;
}
